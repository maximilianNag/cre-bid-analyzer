const XLSX=require('xlsx');const fs=require('fs');const path=require('path');try{const bidsFolder=path.join(__dirname,'../.qodo/CRE EX Folder');const files=fs.readdirSync(bidsFolder).filter(f=>f.endsWith('.csv'));console.log('Found files:',files);const bids=files.map(file=>{const filePath=path.join(bidsFolder,file);const workbook=XLSX.readFile(filePath);const sheet=workbook.Sheets[workbook.SheetNames[0]];return XLSX.utils.sheet_to_json(sheet);});const data=[['Category','XYZ','Sunny','Rad','Min','Max','Avg']];const categories=bids[0].filter(row=>row['Contractor Bidding: XYZ Contractors']!=='Category').map(row=>row['Contractor Bidding: XYZ Contractors']).filter(Boolean);categories.forEach(category=>{const row=[category];const values=[];bids.forEach(bid=>{const item=bid.find(item=>item[Object.keys(item)[0]]===category);const value=item?item.__EMPTY:null;row.push(value);if(typeof value==='number')values.push(value);});if(values.length>0){const min=Math.min(...values);const max=Math.max(...values);const avg=values.reduce((a,b)=>a+b)/values.length;row.push(min,max,avg);}else{row.push('N/A','N/A','N/A');}data.push(row);});const workbook=XLSX.utils.book_new();const worksheet=XLSX.utils.aoa_to_sheet(data);XLSX.utils.book_append_sheet(workbook,worksheet,'Bid Comparison');XLSX.writeFile(workbook,'bid_comparison.xlsx');console.log('Excel file created successfully!');}catch(error){console.error('Error:',error);}